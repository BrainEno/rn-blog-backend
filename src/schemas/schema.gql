# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Query {
  listAllBlogs: [Blog!]!
  relatedBlogs(identifier: String!, author: String!): [Blog!]!
  getBlogBySlug(slug: String!): Blog!
  getOwnBlogs: [Blog!]!
  searchBlog(keyword: String!): [Blog!]!
  getBlogComments(identifier: String!): [Comment!]!
  getUserCollections(userId: Float!): [Blog!]!
  listAllCategories: [Category!]!
  getCatWithBlogs(identifier: String!): Category!
  getCategoryByName(name: String!): Category!
  listAllTags: [Tag!]!
  getTagByName(name: String!): Tag!
  listFollowing: String!
  listFollower: String!
  getMessages(from: String!): [Message!]!
  currentDate: DateTime!
  users: [User!]!
  currUser: User
}

type Blog {
  identifier: String!
  createdAt: DateTime!
  updatedAt: DateTime
  slug: String!
  title: String!
  desc: String!
  body: String!
  imageUrn: String
  tags: [Tag!]!
  tagNames: String!
  categories: [Category!]!
  author: String!
  authorAvatar: String!
  authorId: Float!
  isPublished: Boolean
  likedBy: String
  commentCount: Float
  voteScore: Float
  likesCount: Float
}

# The javascript `Date` as string. Type represents date and time as the ISO Date string.
scalar DateTime

type Tag {
  name: String!
  blogs: [Blog!]!
  slug: String!
}

type Category {
  name: String!
  identifier: String!
  desc: String
  bannerUrn: String
  blogs: [Blog!]
}

type Comment {
  identifier: String!
  content: String!
  username: String!
  createdAt: DateTime!
  updatedAt: DateTime
  blog_identifier: String
  reply_identifiers: String
  replies: Reply!
  blog: Blog!
}

type Reply {
  identifier: String!
  content: String!
  username: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  comments: Comment!
}

type Message {
  identifier: String!
  content: String!
  to: User!
  from: User!
  msgTo: String!
  msgFrom: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type User {
  username: String!
  email: String!
  userRole: Roles
  avatar: String
  blogs: [Blog!]!
  votes: [Vote!]!
  likes: [Like!]!
  likedBlogs: [Blog!]
  comments: [Comment!]!
  replies: [Reply!]!
  likedBlogNum: Float
  followings: [User!]!
  followers: [User!]!
  followingIds: String
  followerIds: String
}

# User Roles
enum Roles {
  # Admin User
  ADMIN

  # Authenticated User
  AUTH_USER

  # Unauthenticated User
  PASSAGER
}

type Vote {
  value: Float!
  user: User!
  username: String!
  blog: Blog!
}

type Like {
  isLiked: Int!
  user: User!
  likedBy: String!
  blogId: Int!
  blog: Blog!
  createdAt: DateTime!
}

type Mutation {
  createBlog(imageUrn: String!, isPublished: Boolean!, body: String!, title: String!): Blog!
  pubBlog(identifier: String!): Blog!
  updateBlog(newImage: String!, newDesc: String!, newBody: String!, newTitle: String!, identifier: String!): Blog!
  addTagToBlog(blogIdentifier: String!, tagName: String!): Blog!
  deleteBlog(id: Float!): Blog!
  deleteCloudinaryImage(cloudinaryUrl: String!): Boolean!
  uploadBlogPic(filename: String!, identifier: String!): String!
  createCategory(bannerUrn: String!, desc: String!, name: String!): Category!
  updateCategory(newBanner: String!, desc: String!, newName: String!, oldName: String!): Category!
  newComment(content: String!, blogIdentifier: String!): Comment!
  editComment(newContent: String!, identifier: String!): Comment!
  removeComment(identifier: String!): Comment!
  createTag(name: String!): Tag!
  deleteTag(name: String!): Tag!
  follow(username: String!): Boolean!
  changeAvatar(avatarUrl: String!): Boolean!
  sendMessage(content: String!, to: String!): Message!
  pubSubMutation(message: String, id: Float!): Boolean!
  publishMutation(message: String, id: Float!): Boolean!
  pubsubMutationToDynamicTopic(message: String, id: Float!, topic: String!): Boolean!
  AddLike(blogId: Float!): Like!
  RemoveLike(blogId: Float!): Like!
  register(password: String!, email: String!, username: String!): Boolean!
  login(password: String!, email: String!): LoginResponse!
  logout: Boolean!
  revokeRefreshTokensForUser(userId: Float!): Boolean!
}

type LoginResponse {
  accessToken: String!
  user: UserInfo!
}

type UserInfo {
  username: String!
  userRole: String!
  avatar: String!
}

type Subscription {
  getMessage: Message!
  getNotification: Notification!
  subscriptionWithFilterToDynamicTopic(topic: String!): Notification!
}

type Notification {
  id: ID!
  message: String
  date: DateTime!
}
